export declare type AssetLoader<T = any> = (key: string) => Promise<T>;
declare type InferAsset<Loader extends AssetLoader<any>> = Loader extends AssetLoader<infer T> ? T : never;
export declare class Assets<Loaders extends Record<string, AssetLoader>> {
    private _loaders;
    private handlePool;
    private handles;
    constructor(_loaders: Loaders);
    load: <LoaderName extends keyof Loaders>(loader: LoaderName, key: string) => Promise<InferAsset<Loaders[LoaderName]>>;
    immediate: <LoaderName extends keyof Loaders>(loader: LoaderName, key: string) => InferAsset<Loaders[LoaderName]> | null;
    private getKey;
}
export {};
