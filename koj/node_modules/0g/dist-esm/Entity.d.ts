import { ComponentInstance, ComponentType } from './Component';
import { Poolable } from './internal/objectPool';
declare type DefinedInstance<Present extends ComponentType<any>, Omitted extends ComponentType<any>, Type extends ComponentType<any>> = Type extends Present ? InstanceType<Type> : Type extends Omitted ? never : InstanceType<Type> | null;
export declare class Entity<DefiniteComponents extends ComponentType<any> = ComponentType<any>, OmittedComponents extends ComponentType<any> = any> implements Poolable {
    private _id;
    readonly components: Map<number, any>;
    private _destroyed;
    get id(): number;
    get destroyed(): boolean;
    __set: (entityId: number, components: ComponentInstance<any>[] | Readonly<ComponentInstance<any>[]>) => void;
    __addComponent: (instance: ComponentInstance<any>) => void;
    __removeComponent: (typeId: number) => any;
    get: <T extends ComponentType<any>>(Type: T) => DefinedInstance<DefiniteComponents, OmittedComponents, T>;
    maybeGet: <T extends unknown>(Type: ComponentType<T>) => T | null;
    reset(): void;
    clone(other: Entity<any>): void;
}
export {};
