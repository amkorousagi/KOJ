var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { EventEmitter } from 'events';
/**
 * Archetype is a group of Entities which share a common component signature.
 * Archetypes are the storage system for Entities; each Entity traces back to an Archetype's
 * entities array. When Entity components change, they are moved from Archetype to Archetype.
 * Grouping in this way is a helpful shortcut to fulfilling Query filter requirements,
 * as we only need to map a small number of Archetypes -> Query, versus iterating over
 * and checking every Entity in the system at init and then on every change.
 */
var Archetype = /** @class */ (function (_super) {
    __extends(Archetype, _super);
    function Archetype(id) {
        var _this = _super.call(this) || this;
        _this.id = id;
        _this.entities = new Array();
        /** Maps entity ID -> index in entity array */
        _this.entityIndexLookup = new Array();
        _this.hasAll = function (types) {
            var masked = types
                .reduce(function (m, T) {
                m[T.id] = '1';
                return m;
            }, _this.id.split(''))
                .join('');
            return _this.id === masked;
        };
        _this.hasSome = function (types) {
            var e_1, _a;
            try {
                for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                    var T = types_1_1.value;
                    if (_this.id[T.id] === '1')
                        return true;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return false;
        };
        _this.includes = function (Type) {
            return _this.id[Type.id] === '1';
        };
        _this.omits = function (Type) {
            return !_this.includes(Type);
        };
        _this.setMaxListeners(10000000);
        return _this;
    }
    /**
     * Archetype is iterable; iterating it will iterate over its stored
     * Entities.
     */
    Archetype.prototype[Symbol.iterator] = function () {
        return this.entities[Symbol.iterator]();
    };
    Archetype.prototype.addEntity = function (entity) {
        // this is the index ("column") of this entity in the table
        var index = this.entities.length;
        // for lookup later when presented with an entityId
        this.entityIndexLookup[entity.id] = index;
        // add entity data to the column of all data arrays
        this.entities[index] = entity;
        this.emit('entityAdded', entity);
    };
    /**
     * Removes an entity from the archetype table, returning its
     * component data list
     */
    Archetype.prototype.removeEntity = function (entityId) {
        var index = this.entityIndexLookup[entityId];
        if (index === undefined) {
            throw new Error("Tried to remove " + entityId + " from archetype " + this.id + ", but was not present");
        }
        this.entityIndexLookup[entityId] = undefined;
        var _a = __read(this.entities.splice(index, 1), 1), entity = _a[0];
        // FIXME: improve this!!! Maybe look into a linked list like that one blog post...
        // decrement all entity index lookups that fall after this index
        for (var i = 0; i < this.entityIndexLookup.length; i++) {
            if (this.entityIndexLookup[i] && this.entityIndexLookup[i] > index) {
                this.entityIndexLookup[i]--;
            }
        }
        this.emit('entityRemoved', entityId);
        return entity;
    };
    Archetype.prototype.getEntity = function (entityId) {
        var index = this.entityIndexLookup[entityId];
        if (index === undefined) {
            throw new Error("Could not find entity " + entityId + " in archetype " + this.id);
        }
        return this.entities[index];
    };
    Archetype.prototype.toString = function () {
        return this.id;
    };
    return Archetype;
}(EventEmitter));
export { Archetype };
//# sourceMappingURL=Archetype.js.map