var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EventEmitter } from 'events';
import { Archetype } from './Archetype';
import { logger } from './logger';
var ArchetypeManager = /** @class */ (function (_super) {
    __extends(ArchetypeManager, _super);
    function ArchetypeManager(game) {
        var _this = _super.call(this) || this;
        _this.game = game;
        // maps entity ids to archetypes
        _this.entityLookup = new Array();
        // maps archetype id bitstrings to Archetype instances
        _this.archetypes = {};
        // FIXME: why +1 here? Component ids are not starting at 0... this
        // should be more elegant
        _this.emptyId = new Array(_this.game.componentManager.componentTypes.length + 1)
            .fill('0')
            .join('');
        _this.archetypes[_this.emptyId] = new Archetype(_this.emptyId);
        _this.setMaxListeners(1000000);
        return _this;
    }
    ArchetypeManager.prototype.createEntity = function (entityId) {
        logger.debug("Creating entity " + entityId);
        this.entityLookup[entityId] = this.emptyId;
        // allocate an Entity
        var entity = this.game.entityPool.acquire();
        entity.__set(entityId, []);
        this.getOrCreate(this.emptyId).addEntity(entity);
        this.emit('entityCreated', entityId);
    };
    ArchetypeManager.prototype.addComponent = function (entityId, instance) {
        logger.debug("Adding " + Object.getPrototypeOf(instance).constructor.name + " to entity " + entityId);
        var oldArchetypeId = this.entityLookup[entityId];
        if (oldArchetypeId === undefined) {
            throw new Error("Tried to add component " + instance.__type + " to " + entityId + ", but it was not found in the archetype registry");
        }
        var oldArchetype = this.getOrCreate(oldArchetypeId);
        // remove data from old archetype
        var entity = oldArchetype.removeEntity(entityId);
        entity.__addComponent(instance);
        var newArchetypeId = (this.entityLookup[entityId] = this.flipBit(oldArchetypeId, instance.__type));
        var archetype = this.getOrCreate(newArchetypeId);
        // copy entity from old to new
        archetype.addEntity(entity);
        logger.debug("Entity " + entityId + " moved to archetype " + newArchetypeId);
        this.emit('entityComponentAdded', entityId, instance);
    };
    ArchetypeManager.prototype.removeComponent = function (entityId, componentType) {
        logger.debug("Removing " + this.game.componentManager.getTypeName(componentType) + " from entity " + entityId);
        var oldArchetypeId = this.entityLookup[entityId];
        if (oldArchetypeId === undefined) {
            logger.warn("Tried to remove component " + this.game.componentManager.getTypeName(componentType) + " from " + entityId + ", but it was not found in the archetype registry");
            return;
        }
        var oldArchetype = this.getOrCreate(oldArchetypeId);
        var entity = oldArchetype.removeEntity(entityId);
        var removed = entity.__removeComponent(componentType);
        var newArchetypeId = (this.entityLookup[entityId] = this.flipBit(oldArchetypeId, componentType));
        var archetype = this.getOrCreate(newArchetypeId);
        archetype.addEntity(entity);
        logger.debug("Entity " + entityId + " moved to archetype " + newArchetypeId);
        this.emit('entityComponentRemoved', entityId, componentType);
        return removed;
    };
    ArchetypeManager.prototype.destroyEntity = function (entityId) {
        logger.debug("Destroying entity " + entityId);
        var archetypeId = this.entityLookup[entityId];
        if (archetypeId === undefined) {
            throw new Error("Tried to destroy " + entityId + ", but it was not found in archetype registry");
        }
        this.entityLookup[entityId] = undefined;
        var archetype = this.archetypes[archetypeId];
        var entity = archetype.removeEntity(entityId);
        this.emit('entityDestroyed', entityId);
        return entity;
    };
    ArchetypeManager.prototype.getEntity = function (entityId) {
        var archetypeId = this.entityLookup[entityId];
        if (archetypeId === undefined) {
            logger.debug("Could not find Archetype for Entity " + entityId);
            return null;
        }
        var archetype = this.archetypes[archetypeId];
        return archetype.getEntity(entityId);
    };
    ArchetypeManager.prototype.getOrCreate = function (id) {
        var archetype = this.archetypes[id];
        if (!archetype) {
            archetype = this.archetypes[id] = new Archetype(id);
            logger.debug("New Archetype " + id + " created");
            this.emit('archetypeCreated', archetype);
        }
        return archetype;
    };
    ArchetypeManager.prototype.flipBit = function (id, typeId) {
        return (id.substr(0, typeId) +
            (id[typeId] === '1' ? '0' : '1') +
            id.substr(typeId + 1));
    };
    return ArchetypeManager;
}(EventEmitter));
export { ArchetypeManager };
//# sourceMappingURL=ArchetypeManager.js.map