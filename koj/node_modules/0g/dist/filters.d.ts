import { ComponentType } from './Component';
export declare type Has<Comp extends ComponentType<any>> = {
    Component: Comp;
    kind: 'has';
    __isFilter: true;
    toString(): string;
};
export declare const has: <Comp extends ComponentType<any>>(Component: Comp) => Has<Comp>;
export declare type Not<Comp extends ComponentType<any>> = {
    Component: Comp;
    kind: 'not';
    __isFilter: true;
    toString(): string;
};
export declare const not: <Comp extends ComponentType<any>>(Component: Comp) => Not<Comp>;
export declare type Changed<Comp extends ComponentType<any>> = {
    Component: Comp;
    kind: 'changed';
    __isFilter: true;
    toString(): string;
};
export declare const changed: <Comp extends ComponentType<any>>(Component: Comp) => Changed<Comp>;
export declare type Any<Comps extends ComponentType<any>[]> = {
    Components: Comps;
    kind: 'any';
    __isFilter: true;
    toString(): string;
};
export declare const any: <Comps extends ComponentType<any>[]>(...Components: Comps) => Any<Comps>;
export declare type Filter<Comp extends ComponentType<any>> = Not<Comp> | Has<Comp> | Changed<Comp> | Any<Comp[]>;
export declare const isFilter: (thing: any) => thing is Filter<any>;
export declare const isNotFilter: (fil: Filter<any>) => fil is Not<ComponentType<any>>;
export declare const isHasFilter: (fil: Filter<any>) => fil is Has<ComponentType<any>>;
export declare const isChangedFilter: (fil: Filter<any>) => fil is Changed<ComponentType<any>>;
export declare const isAnyFilter: (fil: Filter<any>) => fil is Any<ComponentType<any>[]>;
