/// <reference types="node" />
import { EventEmitter } from 'events';
import { ComponentType } from './Component';
import { Entity } from './Entity';
export interface ArchetypeEvents {
    entityAdded(entity: Entity<any, any>): any;
    entityRemoved(entityId: number): any;
}
export declare interface Archetype {
    on<U extends keyof ArchetypeEvents>(ev: U, cb: ArchetypeEvents[U]): this;
    off<U extends keyof ArchetypeEvents>(ev: U, cb: ArchetypeEvents[U]): this;
    emit<U extends keyof ArchetypeEvents>(ev: U, ...args: Parameters<ArchetypeEvents[U]>): boolean;
}
/**
 * Archetype is a group of Entities which share a common component signature.
 * Archetypes are the storage system for Entities; each Entity traces back to an Archetype's
 * entities array. When Entity components change, they are moved from Archetype to Archetype.
 * Grouping in this way is a helpful shortcut to fulfilling Query filter requirements,
 * as we only need to map a small number of Archetypes -> Query, versus iterating over
 * and checking every Entity in the system at init and then on every change.
 */
export declare class Archetype<T extends ComponentType<any>[] = ComponentType<any>[]> extends EventEmitter {
    id: string;
    private entities;
    /** Maps entity ID -> index in entity array */
    private entityIndexLookup;
    constructor(id: string);
    /**
     * Archetype is iterable; iterating it will iterate over its stored
     * Entities.
     */
    [Symbol.iterator](): IterableIterator<Entity<T[number], any>>;
    addEntity(entity: Entity<any, any>): void;
    /**
     * Removes an entity from the archetype table, returning its
     * component data list
     */
    removeEntity(entityId: number): Entity<T[number], any>;
    getEntity(entityId: number): Entity<T[number], any>;
    hasAll: (types: ComponentType<any>[]) => boolean;
    hasSome: (types: ComponentType<any>[]) => boolean;
    includes: (Type: ComponentType<any>) => boolean;
    omits: (Type: ComponentType<any>) => boolean;
    toString(): string;
}
