"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryIterator = void 0;
var QueryIterator = /** @class */ (function () {
    function QueryIterator(query, game) {
        this.query = query;
        this.game = game;
        this.archetypeIndex = 0;
        this.archetypeIterator = null;
        this.result = {
            done: true,
            value: null,
        };
        this.changedFilters = query.filter.filter(function (f) { return f.kind === 'changed'; });
    }
    QueryIterator.prototype.checkChangeFilter = function () {
        var _this = this;
        if (this.changedFilters.length === 0)
            return true;
        return this.changedFilters.some(function (filter) {
            _this.game.componentManager.wasChangedLastFrame(_this.result.value.get(filter.Component.prototype.constructor).id);
        });
    };
    QueryIterator.prototype.next = function () {
        while (this.archetypeIndex < this.query.archetypes.length) {
            if (!this.archetypeIterator) {
                this.archetypeIterator = this.query.archetypes[this.archetypeIndex][Symbol.iterator]();
            }
            this.result = this.archetypeIterator.next();
            // if changed() filter(s) are present, ensure a change has
            // occurred in the specified components
            if (!this.checkChangeFilter()) {
                continue;
            }
            // result is assigned from the current archetype iterator result -
            // if the archetype is done, we move on to the next archetype until
            // we run out
            if (this.result.done) {
                this.archetypeIndex++;
                this.archetypeIterator = null;
                continue;
            }
            return this.result;
        }
        this.result.done = true;
        this.archetypeIndex = 0;
        return this.result;
    };
    return QueryIterator;
}());
exports.QueryIterator = QueryIterator;
//# sourceMappingURL=QueryIterator.js.map