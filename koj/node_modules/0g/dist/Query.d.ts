/// <reference types="node" />
import { EventEmitter } from 'events';
import { ComponentType } from './Component';
import { Game } from './Game';
import { Poolable } from './internal/objectPool';
import { Archetype } from './Archetype';
import { Filter } from './filters';
import { EntityImpostorFor, QueryIterator } from './QueryIterator';
export declare type QueryComponentFilter = Array<Filter<ComponentType<any>> | ComponentType<any>>;
export interface QueryEvents {
    entityAdded(entityId: number): void;
    entityRemoved(entityId: number): void;
}
declare type ExtractQueryDef<Q extends Query<any>> = Q extends Query<infer Def> ? Def : never;
export declare type QueryIteratorFn<Q extends Query<any>, Returns = void> = {
    (ent: EntityImpostorFor<ExtractQueryDef<Q>>): Returns;
};
export declare interface Query<FilterDef extends QueryComponentFilter> {
    on<U extends keyof QueryEvents>(ev: U, cb: QueryEvents[U]): this;
    off<U extends keyof QueryEvents>(ev: U, cb: QueryEvents[U]): this;
    emit<U extends keyof QueryEvents>(ev: U, ...args: Parameters<QueryEvents[U]>): boolean;
}
export declare class Query<FilterDef extends QueryComponentFilter> extends EventEmitter implements Poolable {
    private game;
    filter: Filter<ComponentType<any>>[];
    readonly archetypes: Archetype<ComponentType<any>[]>[];
    private trackedEntities;
    private addedThisFrame;
    private removedThisFrame;
    private changesThisFrame;
    private addedIterable;
    constructor(game: Game);
    private processDef;
    initialize(def: FilterDef): void;
    private matchArchetype;
    reset: () => void;
    private iterator;
    [Symbol.iterator](): QueryIterator<FilterDef>;
    private handleEntityAdded;
    private handleEntityRemoved;
    toString(): string;
    get archetypeIds(): string[];
    get entities(): readonly number[];
    get addedIds(): readonly number[];
    get added(): {
        [Symbol.iterator]: () => AddedIterator<FilterDef>;
    };
    get removedIds(): readonly number[];
    private addToList;
    private removeFromList;
    private resetStepTracking;
    private processAddRemove;
    private emitAdded;
    private emitRemoved;
}
declare class AddedIterator<Def extends QueryComponentFilter> implements Iterator<EntityImpostorFor<Def>> {
    private game;
    private query;
    private index;
    private result;
    constructor(game: Game, query: Query<any>);
    next(): IteratorResult<EntityImpostorFor<Def>, any>;
}
export {};
