"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Game_1 = require("./Game");
var Component_1 = require("./Component");
var A = /** @class */ (function (_super) {
    __extends(A, _super);
    function A() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return A;
}(Component_1.Component(function () { return ({}); })));
var B = /** @class */ (function (_super) {
    __extends(B, _super);
    function B() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return B;
}(Component_1.Component(function () { return ({}); })));
var C = /** @class */ (function (_super) {
    __extends(C, _super);
    function C() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return C;
}(Component_1.Component(function () { return ({}); })));
describe('Game', function () {
    var game;
    beforeEach(function () {
        game = new Game_1.Game({
            components: [A, B, C],
        });
    });
    it('can ad-hoc query', function () {
        var matches = [];
        var withA = game.create();
        game.add(withA, A);
        var withAB = game.create();
        game.add(withAB, A);
        game.add(withAB, B);
        var withABC = game.create();
        game.add(withABC, A);
        game.add(withABC, B);
        game.add(withABC, C);
        var withC = game.create();
        game.add(withC, C);
        // step to run create enqueued operations
        game.step(0);
        game.query([A, B], function (ent) {
            matches.push(ent.id);
        });
        expect(matches).toContain(withAB);
        expect(matches).toContain(withABC);
        expect(matches).not.toContain(withA);
        expect(matches).not.toContain(withC);
    });
});
//# sourceMappingURL=Game.test.js.map