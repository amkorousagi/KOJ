"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentManager = void 0;
var ComponentPool_1 = require("./ComponentPool");
var Component_1 = require("./Component");
/**
 * Manages pools of Components based on their Type, and
 * the presence of Components assigned to Entities.
 */
var ComponentManager = /** @class */ (function () {
    function ComponentManager(componentTypes, game) {
        var _this = this;
        this.componentTypes = componentTypes;
        this.game = game;
        this.pools = new Array();
        this.changed = new Array();
        this.acquire = function (typeId, initialValues) {
            var component = _this.pools[typeId].acquire(initialValues, _this.game.idManager.get());
            component[Component_1.COMPONENT_CHANGE_HANDLE] = _this.onComponentChanged;
            return component;
        };
        this.release = function (instance) {
            delete instance[Component_1.COMPONENT_CHANGE_HANDLE];
            return _this.pools[instance.__type].release(instance);
        };
        this.wasChangedLastFrame = function (componentInstanceId) {
            return !!_this.changed[componentInstanceId];
        };
        this.onComponentChanged = function (component) {
            _this.game.enqueueOperation({
                op: 'markChanged',
                componentId: component.id,
            });
        };
        this.markChanged = function (component) {
            _this.changed[component.id] = true;
        };
        this.resetChanged = function () {
            _this.changed.length = 0;
        };
        this.getTypeName = function (typeId) {
            return _this.pools[typeId].ComponentType.name;
        };
        // initialize pools, one for each ComponentType by ID. ComponentType IDs are incrementing integers.
        Object.values(componentTypes).forEach(function (Type) {
            // assign an ID
            Type.id = game.idManager.get();
            // create a pool
            _this.pools[Type.id] = new ComponentPool_1.ComponentPool(Type, _this.game);
        });
        // TODO: right time to do this?
        game.on('preApplyOperations', this.resetChanged);
    }
    return ComponentManager;
}());
exports.ComponentManager = ComponentManager;
//# sourceMappingURL=ComponentManager.js.map