import { ComponentType } from './Component';
import { Entity } from './Entity';
import { Any, Filter, Not } from './filters';
import { Game } from './Game';
import { Query, QueryComponentFilter } from './Query';
declare type FilterNots<CompUnion extends Filter<ComponentType<any>> | ComponentType<any>> = CompUnion extends Not<any> ? never : CompUnion;
declare type UnwrapAnys<CompUnion extends Filter<ComponentType<any>> | ComponentType<any>> = CompUnion extends Any<any> ? never : CompUnion;
declare type OnlyNots<CompUnion extends Filter<ComponentType<any>> | ComponentType<any>> = CompUnion extends Not<infer C> ? C : never;
declare type UnwrapFilters<CompUnion extends Filter<ComponentType<any>> | ComponentType<any>> = CompUnion extends Filter<infer C> ? C : CompUnion;
declare type DefiniteComponentsFromFilter<Fil extends QueryComponentFilter> = UnwrapFilters<UnwrapAnys<FilterNots<Fil[number]>>>;
declare type OmittedComponentsFromFilter<Fil extends QueryComponentFilter> = OnlyNots<Fil[number]>;
export declare type EntityImpostorFor<Q extends QueryComponentFilter> = Entity<DefiniteComponentsFromFilter<Q>, OmittedComponentsFromFilter<Q>>;
export declare class QueryIterator<Def extends QueryComponentFilter> implements Iterator<EntityImpostorFor<Def>> {
    private query;
    private game;
    private archetypeIndex;
    private archetypeIterator;
    private result;
    private changedFilters;
    constructor(query: Query<Def>, game: Game);
    private checkChangeFilter;
    next(): IteratorResult<EntityImpostorFor<Def>, any>;
}
export {};
