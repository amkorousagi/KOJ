"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("../Component");
var Effect_1 = require("../Effect");
var filters_1 = require("../filters");
var Game_1 = require("../Game");
var logger_1 = require("../logger");
var System_1 = require("../System");
var delta = 16 + 2 / 3;
describe('integration tests', function () {
    var OutputComponent = /** @class */ (function (_super) {
        __extends(OutputComponent, _super);
        function OutputComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return OutputComponent;
    }(Component_1.Component(function () { return ({
        removablePresent: false,
    }); })));
    var RemovableComponent = /** @class */ (function (_super) {
        __extends(RemovableComponent, _super);
        function RemovableComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RemovableComponent;
    }(Component_1.Component(function () { return ({
        stepsSinceAdded: 0,
    }); })));
    var stepsTillToggle = 3;
    var SetFlagEffect = Effect_1.makeEffect([RemovableComponent, OutputComponent], function (ent) {
        return __generator(this, function (_a) {
            logger_1.logger.debug('Setting removablePresent: true');
            ent.get(OutputComponent).update(function (output) {
                output.removablePresent = true;
            });
            return [2 /*return*/];
        });
    }, function (ent) {
        return __generator(this, function (_a) {
            logger_1.logger.debug('Setting removablePresent: false');
            ent.get(OutputComponent).update(function (output) {
                output.removablePresent = false;
            });
            return [2 /*return*/];
        });
    });
    var ReAddRemovableEffect = Effect_1.makeEffect([filters_1.not(RemovableComponent)], function (ent, game) {
        return __generator(this, function (_a) {
            logger_1.logger.debug('Adding RemovableComponent');
            game.add(ent.id, RemovableComponent);
            return [2 /*return*/];
        });
    });
    var IncrementRemoveTimerSystem = System_1.makeSystem([RemovableComponent], function (ent) {
        logger_1.logger.debug('Incrementing stepsSinceAdded');
        ent.get(RemovableComponent).update(function (comp) {
            comp.stepsSinceAdded++;
            logger_1.logger.debug("stepsSinceAdded: " + comp.stepsSinceAdded);
        });
    });
    var RemoveSystem = System_1.makeSystem([filters_1.changed(RemovableComponent)], function (ent, game) {
        if (ent.get(RemovableComponent).stepsSinceAdded >= stepsTillToggle) {
            logger_1.logger.debug('Removing RemovableComponent');
            game.remove(ent.id, RemovableComponent);
        }
    });
    it('adds and removes components, and queries for those operations', function () {
        var game = new Game_1.Game({
            components: [OutputComponent, RemovableComponent],
            systems: [
                SetFlagEffect,
                ReAddRemovableEffect,
                IncrementRemoveTimerSystem,
                RemoveSystem,
            ],
        });
        var a = game.create();
        game.add(a, OutputComponent);
        logger_1.logger.debug('Step 1');
        game.step(delta);
        var entity = game.get(a);
        expect(entity.maybeGet(OutputComponent)).not.toBe(null);
        expect(entity.get(OutputComponent).removablePresent).toBe(false);
        logger_1.logger.debug('Step 2');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(true);
        expect(entity.maybeGet(RemovableComponent)).not.toBe(null);
        expect(entity.maybeGet(RemovableComponent).stepsSinceAdded).toBe(0);
        logger_1.logger.debug('Step 3');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(true);
        expect(entity.maybeGet(RemovableComponent)).not.toBe(null);
        expect(entity.maybeGet(RemovableComponent).stepsSinceAdded).toBe(1);
        logger_1.logger.debug('Step 4');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(true);
        expect(entity.maybeGet(RemovableComponent)).not.toBe(null);
        expect(entity.maybeGet(RemovableComponent).stepsSinceAdded).toBe(2);
        logger_1.logger.debug('Step 5');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(false);
        expect(entity.maybeGet(RemovableComponent)).toBe(null);
        logger_1.logger.debug('Step 6');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(true);
        expect(entity.maybeGet(RemovableComponent)).not.toBe(null);
        expect(entity.maybeGet(RemovableComponent).stepsSinceAdded).toBe(0);
    });
});
//# sourceMappingURL=integration.test.js.map