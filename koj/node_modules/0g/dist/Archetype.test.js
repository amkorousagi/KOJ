"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var Archetype_1 = require("./Archetype");
var Component_1 = require("./Component");
var Entity_1 = require("./Entity");
var A = /** @class */ (function (_super) {
    __extends(A, _super);
    function A() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return A;
}(Component_1.Component(function () { return ({}); })));
var B = /** @class */ (function (_super) {
    __extends(B, _super);
    function B() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return B;
}(Component_1.Component(function () { return ({}); })));
var C = /** @class */ (function (_super) {
    __extends(C, _super);
    function C() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return C;
}(Component_1.Component(function () { return ({}); })));
A.id = 0;
B.id = 1;
C.id = 2;
describe('Archetypes', function () {
    var entities = [
        [[new A(), new B(), new C()], 1],
        [[new A(), new B(), new C()], 5],
        [[new A(), new B(), new C()], 100],
    ];
    it('stores and iterates entities', function () {
        var e_1, _a;
        var arch = new Archetype_1.Archetype('111');
        entities.forEach(function (_a) {
            var _b = __read(_a, 2), components = _b[0], id = _b[1];
            var entity = new Entity_1.Entity();
            entity.__set(id, components);
            arch.addEntity(entity);
        });
        // ordering is not guaranteed on the iteration, so just storing in
        // an intermediate array
        var i = 0;
        try {
            for (var arch_1 = __values(arch), arch_1_1 = arch_1.next(); !arch_1_1.done; arch_1_1 = arch_1.next()) {
                var item = arch_1_1.value;
                expect(item.id).toBe(entities[i][1]);
                expect(item.get(A)).toEqual(entities[i][0][0]);
                expect(item.get(B)).toEqual(entities[i][0][1]);
                expect(item.get(C)).toEqual(entities[i][0][2]);
                i++;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (arch_1_1 && !arch_1_1.done && (_a = arch_1.return)) _a.call(arch_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    it('removes entities', function () {
        var e_2, _a;
        var arch = new Archetype_1.Archetype('111');
        entities.forEach(function (_a) {
            var _b = __read(_a, 2), components = _b[0], id = _b[1];
            var entity = new Entity_1.Entity();
            entity.__set(id, components);
            arch.addEntity(entity);
        });
        arch.removeEntity(entities[1][1]);
        try {
            for (var arch_2 = __values(arch), arch_2_1 = arch_2.next(); !arch_2_1.done; arch_2_1 = arch_2.next()) {
                var item = arch_2_1.value;
                expect(item.id).not.toEqual(5);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (arch_2_1 && !arch_2_1.done && (_a = arch_2.return)) _a.call(arch_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    });
    it('keeps entity locations consistent after removal', function () {
        var arch = new Archetype_1.Archetype('111');
        entities.forEach(function (_a) {
            var _b = __read(_a, 2), components = _b[0], id = _b[1];
            var entity = new Entity_1.Entity();
            entity.__set(id, components);
            arch.addEntity(entity);
        });
        arch.removeEntity(entities[0][1]);
        expect(arch.getEntity(entities[1][1]).id).toEqual(entities[1][1]);
        expect(arch.getEntity(entities[2][1]).id).toEqual(entities[2][1]);
    });
});
//# sourceMappingURL=Archetype.test.js.map