"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = exports.Component = exports.COMPONENT_CHANGE_HANDLE = void 0;
exports.COMPONENT_CHANGE_HANDLE = Symbol('Component change handle');
function defaultSerialize(instance) {
    var gettersAndSetters = {};
    var data = {};
    var descriptors = Object.getOwnPropertyDescriptors(instance);
    Object.keys(descriptors).forEach(function (key) {
        var descriptor = descriptors[key];
        if (typeof (descriptor === null || descriptor === void 0 ? void 0 : descriptor.get) === 'function' ||
            typeof (descriptor === null || descriptor === void 0 ? void 0 : descriptor.set) === 'function') {
            gettersAndSetters[key] = descriptor;
        }
        else if (descriptor.enumerable &&
            descriptor.value &&
            !(typeof descriptor.value === 'function')) {
            data[key] = descriptor.value;
        }
    });
    return JSON.stringify(data);
}
function defaultDeserialize(serialized, additionalProperties) {
    var data = JSON.parse(serialized);
    Object.defineProperties(data, additionalProperties);
    return data;
}
function defaultInitialize(target, overrides, id) {
    Object.assign(target, overrides);
    target.id = id;
}
function BaseComponent(_a) {
    var _b;
    var defaults = _a.defaults;
    return _b = /** @class */ (function () {
            function BaseComponent() {
                var _this = this;
                this.id = 0;
                this.__type = Object.getPrototypeOf(this).constructor.id;
                this.reset = function () {
                    Object.getPrototypeOf(_this).constructor.initialize(_this, defaults(), 0);
                };
                /**
                 * Use this function to semantically apply mutations to a
                 * Component instance and seamlessly set the updated=true flag.
                 * Works well for instant changes to a Component inline with
                 * the .get call to access it (see code example)
                 *
                 * @example
                 * entity.get(MyComponent).update(myComponent => {
                 *   // reference values on the instance to set new ones
                 *   myComponent.value = myComponent.value + 1;
                 *   // upon function completion, myComponent.updated is
                 *   // set `true` for you
                 * });
                 */
                this.update = function (updater) {
                    updater(_this);
                    _this.updated = true;
                };
                Object.assign(this, defaults());
            }
            Object.defineProperty(BaseComponent.prototype, "updated", {
                /**
                 * This flag must be set whenever you make changes to a
                 * Component instance which you want to be reported to
                 * changed() filters in queries.
                 */
                set: function (_) {
                    var _a;
                    (_a = this[exports.COMPONENT_CHANGE_HANDLE]) === null || _a === void 0 ? void 0 : _a.call(this, this);
                },
                enumerable: false,
                configurable: true
            });
            return BaseComponent;
        }()),
        _b.id = 0,
        _b.defaults = defaults,
        _b.initialize = defaultInitialize,
        _b;
}
function Component(defaults, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.serialize, serialize = _c === void 0 ? defaultSerialize : _c, _d = _b.deserialize, deserialize = _d === void 0 ? defaultDeserialize : _d;
    var Type = BaseComponent({ defaults: defaults });
    Type.serialize = serialize;
    Type.deserialize = deserialize;
    Type.serialized = true;
    return Type;
}
exports.Component = Component;
function State(defaults) {
    var Type = BaseComponent({ defaults: defaults });
    Type.serialized = false;
    return Type;
}
exports.State = State;
//# sourceMappingURL=Component.js.map