"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game = void 0;
var events_1 = require("events");
var QueryManager_1 = require("./QueryManager");
var ComponentManager_1 = require("./ComponentManager");
var IdManager_1 = require("./IdManager");
var ArchetypeManager_1 = require("./ArchetypeManager");
var Entity_1 = require("./Entity");
var Resources_1 = require("./Resources");
var objectPool_1 = require("./internal/objectPool");
var RemovedList_1 = require("./RemovedList");
var Assets_1 = require("./Assets");
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game(_a) {
        var components = _a.components, _b = _a.systems, systems = _b === void 0 ? [] : _b, _c = _a.assetLoaders, assetLoaders = _c === void 0 ? {} : _c;
        var _this = _super.call(this) || this;
        _this._idManager = new IdManager_1.IdManager();
        _this._operationQueue = [];
        _this._globals = new Resources_1.Resources();
        _this._entityPool = new objectPool_1.ObjectPool(function () { return new Entity_1.Entity(); });
        _this._removedList = new RemovedList_1.RemovedList();
        // TODO: configurable?
        _this._phases = ['preStep', 'step', 'postStep'];
        _this._delta = 0;
        _this._time = 0;
        _this._constants = {
            maxComponentId: 256,
            maxEntities: Math.pow(2, 16),
        };
        /**
         * Allocates a new entity id and enqueues an operation to create the entity at the next opportunity.
         */
        _this.create = function () {
            var id = _this.idManager.get();
            _this._operationQueue.push({
                op: 'createEntity',
                entityId: id,
            });
            return id;
        };
        /**
         * Enqueues an entity to be destroyed at the next opportunity
         */
        _this.destroy = function (id) {
            _this._operationQueue.push({
                op: 'removeEntity',
                entityId: id,
            });
        };
        /**
         * Add a component to an entity.
         */
        _this.add = function (entityId, Type, initial) {
            _this._operationQueue.push({
                op: 'addComponent',
                entityId: entityId,
                componentType: Type.id,
                initialValues: initial,
            });
        };
        /**
         * Remove a component by type from an entity
         */
        _this.remove = function (entityId, Type) {
            _this._operationQueue.push({
                op: 'removeComponent',
                entityId: entityId,
                componentType: Type.id,
            });
        };
        /**
         * Get a single entity by its known ID
         */
        _this.get = function (entityId) {
            var _a;
            return ((_a = _this.archetypeManager.getEntity(entityId)) !== null && _a !== void 0 ? _a : _this._removedList.get(entityId));
        };
        /**
         * Run some logic for each entity that meets an ad-hoc query.
         */
        _this.query = function (filter, run) {
            var e_1, _a;
            var query = _this._queryManager.create(filter);
            var ent;
            try {
                for (var query_1 = __values(query), query_1_1 = query_1.next(); !query_1_1.done; query_1_1 = query_1.next()) {
                    ent = query_1_1.value;
                    run(ent, _this);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (query_1_1 && !query_1_1.done && (_a = query_1.return)) _a.call(query_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /**
         * Manually step the game simulation forward. Provide a
         * delta (in ms) of time elapsed since last frame.
         */
        _this.step = function (delta) {
            _this._delta = delta;
            _this._phases.forEach(function (phase) {
                _this.emit(phase);
            });
            _this.emit('destroyEntities');
            _this._removedList.flush(_this.destroyEntity);
            _this.emit('preApplyOperations');
            _this.flushOperations();
            _this.emit('stepComplete');
        };
        _this.enqueueOperation = function (operation) {
            _this._operationQueue.push(operation);
        };
        _this.destroyEntity = function (entity) {
            entity.components.forEach(function (instance) {
                if (instance)
                    _this.componentManager.release(instance);
            });
            _this.entityPool.release(entity);
        };
        _this.flushOperations = function () {
            while (_this._operationQueue.length) {
                _this.applyOperation(_this._operationQueue.shift());
            }
        };
        _this.applyOperation = function (operation) {
            var instance;
            var entity;
            switch (operation.op) {
                case 'addComponent':
                    if (operation.entityId === 0)
                        break;
                    instance = _this.componentManager.acquire(operation.componentType, operation.initialValues);
                    _this.archetypeManager.addComponent(operation.entityId, instance);
                    break;
                case 'removeComponent':
                    if (operation.entityId === 0)
                        break;
                    instance = _this.archetypeManager.removeComponent(operation.entityId, operation.componentType);
                    if (instance) {
                        _this.componentManager.release(instance);
                    }
                    break;
                case 'createEntity':
                    _this.archetypeManager.createEntity(operation.entityId);
                    break;
                case 'removeEntity':
                    if (operation.entityId === 0)
                        break;
                    entity = _this.archetypeManager.destroyEntity(operation.entityId);
                    _this._removedList.add(entity);
                    break;
                case 'markChanged':
                    _this.componentManager.markChanged(operation.componentId);
                    break;
            }
        };
        _this.setMaxListeners(Infinity);
        _this._componentManager = new ComponentManager_1.ComponentManager(components, _this);
        _this._assets = new Assets_1.Assets(assetLoaders);
        _this._queryManager = new QueryManager_1.QueryManager(_this);
        _this._archetypeManager = new ArchetypeManager_1.ArchetypeManager(_this);
        _this._runnableCleanups = systems.map(function (sys) { return sys(_this); });
        return _this;
    }
    Object.defineProperty(Game.prototype, "idManager", {
        get: function () {
            return this._idManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "componentManager", {
        get: function () {
            return this._componentManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "archetypeManager", {
        get: function () {
            return this._archetypeManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "delta", {
        get: function () {
            return this._delta;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "time", {
        get: function () {
            return this._time;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "queryManager", {
        get: function () {
            return this._queryManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "constants", {
        get: function () {
            return this._constants;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "globals", {
        get: function () {
            return this._globals;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "assets", {
        get: function () {
            return this._assets;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "entityPool", {
        get: function () {
            return this._entityPool;
        },
        enumerable: false,
        configurable: true
    });
    return Game;
}(events_1.EventEmitter));
exports.Game = Game;
//# sourceMappingURL=Game.js.map