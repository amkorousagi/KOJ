"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectPool = void 0;
var logger_1 = require("../logger");
var ObjectPool = /** @class */ (function () {
    function ObjectPool(factory, initialSize) {
        if (initialSize === void 0) { initialSize = 1; }
        this.factory = factory;
        this.free = new Array();
        this.count = 0;
        this.expand(initialSize);
    }
    ObjectPool.prototype.acquire = function () {
        // Grow the list by 20%ish if we're out
        if (this.free.length <= 0) {
            this.expand(Math.round(this.count * 0.2) + 1);
        }
        var item = this.free.pop();
        return item;
    };
    ObjectPool.prototype.release = function (item) {
        var _a;
        if (!item) {
            logger_1.logger.warn("Tried to release " + item);
            return;
        }
        (_a = item.reset) === null || _a === void 0 ? void 0 : _a.call(item);
        this.free.push(item);
    };
    ObjectPool.prototype.expand = function (count) {
        for (var n = 0; n < count; n++) {
            var clone = this.factory();
            this.free.push(clone);
        }
        this.count += count;
    };
    Object.defineProperty(ObjectPool.prototype, "size", {
        get: function () {
            return this.count;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObjectPool.prototype, "freeCount", {
        get: function () {
            return this.free.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObjectPool.prototype, "usedCount", {
        get: function () {
            return this.count - this.free.length;
        },
        enumerable: false,
        configurable: true
    });
    return ObjectPool;
}());
exports.ObjectPool = ObjectPool;
//# sourceMappingURL=objectPool.js.map