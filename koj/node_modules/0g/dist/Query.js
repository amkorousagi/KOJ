"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Query = void 0;
var events_1 = require("events");
var filters_1 = require("./filters");
var QueryIterator_1 = require("./QueryIterator");
var logger_1 = require("./logger");
var Query = /** @class */ (function (_super) {
    __extends(Query, _super);
    function Query(game) {
        var _a;
        var _this = _super.call(this) || this;
        _this.game = game;
        _this.filter = [];
        _this.archetypes = new Array();
        _this.trackedEntities = [];
        _this.addedThisFrame = [];
        _this.removedThisFrame = [];
        _this.changesThisFrame = 0;
        _this.processDef = function (userDef) {
            return userDef.map(function (fil) { return (filters_1.isFilter(fil) ? fil : filters_1.has(fil)); });
        };
        _this.matchArchetype = function (archetype) {
            var e_1, _a;
            var match = true;
            try {
                for (var _b = __values(_this.filter), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var filter = _c.value;
                    switch (filter.kind) {
                        case 'has':
                            match = archetype.includes(filter.Component);
                            break;
                        case 'not':
                            match = archetype.omits(filter.Component);
                            break;
                        case 'changed':
                            match = archetype.includes(filter.Component);
                            break;
                        case 'any':
                            match = filter.Components.some(function (Comp) { return archetype.includes(Comp); });
                    }
                    if (!match)
                        return;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            _this.archetypes.push(archetype);
            logger_1.logger.debug("Query " + _this.toString() + " added Archetype " + archetype.id);
            archetype.on('entityRemoved', _this.handleEntityRemoved);
            archetype.on('entityAdded', _this.handleEntityAdded);
        };
        _this.reset = function () {
            _this.archetypes.length = 0;
            _this.filter = [];
            _this.game.archetypeManager.off('archetypeCreated', _this.matchArchetype);
        };
        // closure provides iterator properties
        _this.iterator = new QueryIterator_1.QueryIterator(_this, _this.game);
        _this.handleEntityAdded = function (entity) {
            _this.addToList(entity.id);
        };
        _this.handleEntityRemoved = function (entityId) {
            _this.removeFromList(entityId);
        };
        _this.addToList = function (entityId) {
            _this.trackedEntities.push(entityId);
            var removedIndex = _this.removedThisFrame.indexOf(entityId);
            if (removedIndex !== -1) {
                // this was a transfer (removes happen first)
                _this.removedThisFrame.splice(removedIndex, 1);
                _this.changesThisFrame--;
            }
            else {
                // only non-transfers count as adds
                _this.addedThisFrame.push(entityId);
                _this.changesThisFrame++;
            }
        };
        _this.removeFromList = function (entityId) {
            var index = _this.trackedEntities.indexOf(entityId);
            if (index === -1)
                return;
            _this.trackedEntities.splice(index, 1);
            _this.removedThisFrame.push(entityId);
            _this.changesThisFrame++;
        };
        _this.resetStepTracking = function () {
            _this.addedThisFrame.length = 0;
            _this.removedThisFrame.length = 0;
            _this.changesThisFrame = 0;
        };
        _this.processAddRemove = function () {
            if (_this.changesThisFrame) {
                _this.addedThisFrame.forEach(_this.emitAdded);
                _this.removedThisFrame.forEach(_this.emitRemoved);
            }
        };
        _this.emitAdded = function (entityId) {
            logger_1.logger.debug("Entity " + entityId + " added to query " + _this.toString());
            _this.emit('entityAdded', entityId);
        };
        _this.emitRemoved = function (entityId) {
            logger_1.logger.debug("Entity " + entityId + " removed from query " + _this.toString());
            _this.emit('entityRemoved', entityId);
        };
        _this.addedIterable = (_a = {},
            _a[Symbol.iterator] = function () { return new AddedIterator(game, _this); },
            _a);
        // when do we reset the frame-specific tracking?
        // right before we populate new values from this frame's operations.
        game.on('preApplyOperations', _this.resetStepTracking);
        // after we apply operations and register all changes for the frame,
        // we do processing of final add/remove list
        game.on('stepComplete', _this.processAddRemove);
        return _this;
    }
    Query.prototype.initialize = function (def) {
        var e_2, _a;
        logger_1.logger.debug("Initializing Query " + this.toString());
        this.filter = this.processDef(def);
        Object.values(this.game.archetypeManager.archetypes).forEach(this.matchArchetype);
        this.game.archetypeManager.on('archetypeCreated', this.matchArchetype);
        // reset all tracking arrays
        this.trackedEntities.length = 0;
        this.addedThisFrame.length = 0;
        this.removedThisFrame.length = 0;
        this.changesThisFrame = 0;
        try {
            // bootstrap entities list -
            // TODO: optimize?
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var ent = _c.value;
                this.trackedEntities.push(ent.id);
                this.addedThisFrame.push(ent.id);
                this.emitAdded(ent.id);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    Query.prototype[Symbol.iterator] = function () {
        return this.iterator;
    };
    Query.prototype.toString = function () {
        return this.filter
            .map(function (filterItem) {
            if (filters_1.isFilter(filterItem)) {
                return filterItem.toString();
            }
            return filterItem.name;
        })
            .join(',');
    };
    Object.defineProperty(Query.prototype, "archetypeIds", {
        get: function () {
            return this.archetypes.map(function (a) { return a.id; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "entities", {
        get: function () {
            return this.trackedEntities;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "addedIds", {
        get: function () {
            return this.addedThisFrame;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "added", {
        get: function () {
            return this.addedIterable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "removedIds", {
        get: function () {
            return this.removedThisFrame;
        },
        enumerable: false,
        configurable: true
    });
    return Query;
}(events_1.EventEmitter));
exports.Query = Query;
var AddedIterator = /** @class */ (function () {
    function AddedIterator(game, query) {
        this.game = game;
        this.query = query;
        this.index = 0;
        this.result = {
            done: true,
            value: null,
        };
    }
    AddedIterator.prototype.next = function () {
        if (this.index >= this.query.addedIds.length) {
            this.result.done = true;
            return this.result;
        }
        this.result.done = false;
        this.result.value = this.game.get(this.query.addedIds[this.index]);
        return this.result;
    };
    return AddedIterator;
}());
//# sourceMappingURL=Query.js.map